/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chargebeesync;

import com.chargebee.ListResult;
import com.chargebee.models.*;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.SwingWorker;


/**
 *
 * @author Vagelis
 */
public class syncFrame extends javax.swing.JFrame{
    
    private Task task;
    //Task so there is not much work on a single thread
    class Task extends SwingWorker<Void, Void> {
        /*
         * Main task. Executed in background thread.
         */
        @Override
        public Void doInBackground() {           
            try { 
                //Calling the method for data sync
                sync();
            } catch (IOException e) {
                e.printStackTrace();
            }           
            //Initialize progress property.  
        return null;
        }
        
        @Override
        public void done() {
            //Informs the user that sync is complete through a label
            infoLabel.setText("Synchronization Complete!");
            syncButton.setEnabled(true);
        }
    }

    public syncFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        syncButton = new javax.swing.JButton();
        infoLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        syncButton.setText("Synchronize Data");
        syncButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        syncButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syncButtonActionPerformed(evt);
            }
        });

        infoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoLabel.setText("Data will be stored in .doc files where the project is. Please close any opened files");
        infoLabel.setToolTipText("");
        infoLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(syncButton, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(syncButton)
                .addGap(38, 38, 38)
                .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(124, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void syncButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncButtonActionPerformed
        //Disable button untl the task is complete
        syncButton.setEnabled(false);
        //Ask the user to wait for the task to complete
        infoLabel.setText("Please wait... Synchronization in progress.");
        task = new Task();
        //Start the task that syncs the data
        task.execute();
    }//GEN-LAST:event_syncButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(syncFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(syncFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(syncFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(syncFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new syncFrame().setVisible(true);
            }
        });
    }
    
    //Method used for the connection to the site and sync of the data
    public void sync() throws IOException{
        //Create a class that handles connection and files
        ChargeBeeSync cbs = new ChargeBeeSync();
        //Connect to site
        cbs.connectToChargeBee();
        //Get all the available data from ChargeBee
        ListResult customerResult = Customer.list().request();
        ListResult subscriptionResult = Subscription.list().request();
        ListResult invoicesResult = Invoice.list().request();
        ListResult creditNoteResult = CreditNote.list().request();
        ListResult orderListResult = Order.list().request();
        ListResult transactionsResult = Transaction.list().request();
        ListResult plansResult = Plan.list().request();
        ListResult addonsResult = Addon.list().request();
        ListResult couponsResult = Coupon.list().request();
        //Set the filenames and path for each data category
        Path fileCustomer = Paths.get("Customers.doc");
        Path fileSubscriptions = Paths.get("Subscriptions.doc");
        Path fileCards = Paths.get("Cards.doc");
        Path fileInvoices = Paths.get("Invoices.doc");
        Path fileCreditNotes = Paths.get("CreditNotes.doc");
        Path fileOrders = Paths.get("Orders.doc");
        Path fileTransactions = Paths.get("Transactions.doc");
        Path filePlans = Paths.get("Plans.doc");
        Path fileAddons = Paths.get("Addons.doc");
        Path fileCoupons = Paths.get("Coupons.doc");
        Path fileAddresses = Paths.get("Adresses.doc");
        //Write the data retrieved into created files
        cbs.writeCustomerFile(customerResult, fileCustomer);  
        cbs.writeSubscriptionsFile(subscriptionResult, fileSubscriptions);
        cbs.writeCardsFile(customerResult, fileCards);
        cbs.writeInvoicesFile(invoicesResult, fileInvoices);
        cbs.writeCreditNotesFile(creditNoteResult, fileCreditNotes);
        cbs.writeOrdersFile(orderListResult, fileOrders);
        cbs.writeTransactionsFile(transactionsResult, fileTransactions);
        cbs.writePlansFile(plansResult, filePlans);
        cbs.writeAddonsFile(addonsResult, fileAddons);
        cbs.writeCouponsFile(couponsResult, fileCoupons);
        cbs.writeAddressesFile(subscriptionResult, fileAddresses);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel infoLabel;
    private javax.swing.JButton syncButton;
    // End of variables declaration//GEN-END:variables
}
